{"version":3,"file":"js\\chunks\\developer-read-lazy.8fdc6f40d3c37acf46f4.js","mappings":"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","sources":["webpack://monetize-frontend-admin-panel/./src/features/developers/components/form/index.module.css?8d74","webpack://monetize-frontend-admin-panel/./src/features/developers/components/form/index.tsx","webpack://monetize-frontend-admin-panel/./src/features/developers/components/form/form-display.tsx","webpack://monetize-frontend-admin-panel/./src/features/developers/components/balance/success.tsx","webpack://monetize-frontend-admin-panel/./src/features/developers/components/balance/index.module.css?6cdb","webpack://monetize-frontend-admin-panel/./src/features/developers/components/balance/index.tsx","webpack://monetize-frontend-admin-panel/./src/features/developers/redux/selectors.ts","webpack://monetize-frontend-admin-panel/./src/features/developers/routes/read/index.tsx","webpack://monetize-frontend-admin-panel/./src/features/developers/routes/read/index.module.css?b796"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formLayout\":\"formLayout-SqdTq\",\"formDisplay\":\"formDisplay-V4wpg\",\"form\":\"form-zaAwt\",\"submitButtonFormItem\":\"submitButtonFormItem-rNbjk\"};","import { Button, Form, Input } from 'antd';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport React, { FC, useMemo } from 'react';\r\n\r\nimport { trimObjectValues } from 'libs/utils';\r\nimport { useAppDispatch } from 'store';\r\n\r\nimport { DeveloperInfo } from '../../types';\r\nimport { createDeveloper, updateDeveloper } from '../../redux/slice';\r\n\r\nimport css from './index.module.css';\r\n\r\ninterface DevelopersFormProps {\r\n  mode: 'create' | 'update';\r\n  data?: DeveloperInfo;\r\n}\r\n\r\nconst DevelopersForm: FC<DevelopersFormProps> = ({ mode = 'update', data }: DevelopersFormProps) => {\r\n  const { t } = useTranslation('developers');\r\n  const dispatch = useAppDispatch();\r\n  const params = useParams();\r\n\r\n  const onFinish = (values: DeveloperInfo) => {\r\n    const trimmedValues = trimObjectValues<DeveloperInfo>(values);\r\n\r\n    mode === 'create'\r\n      ? dispatch(createDeveloper(trimmedValues))\r\n      : dispatch(updateDeveloper({ id: params.developerId, ...trimmedValues }));\r\n  };\r\n\r\n  const fields = useMemo(() => {\r\n    return data\r\n      ? [\r\n          { name: ['companyName'], value: data.companyName },\r\n          { name: ['email'], value: data.email },\r\n          { name: ['login'], value: data.login },\r\n          { name: ['phone'], value: data.phone },\r\n          { name: ['password'], value: 'XXXXXXXXX' },\r\n        ]\r\n      : undefined;\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className={css.formLayout}>\r\n      <Form\r\n        className={css.form}\r\n        name={`developer-${mode}`}\r\n        onFinish={onFinish}\r\n        fields={fields || undefined}\r\n        autoComplete=\"off\"\r\n        layout=\"vertical\"\r\n      >\r\n        <Form.Item\r\n          label={<h3>{`${t('form.companyName')}:`}</h3>}\r\n          name=\"companyName\"\r\n          rules={[{ required: true, message: `${t('form.companyNameMessage')}!` }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={<h3>{`${t('form.email')}:`}</h3>}\r\n          name=\"email\"\r\n          rules={[{ required: true, message: `${t('form.emailMessage')}!` }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={<h3>{`${t('form.phone')}:`}</h3>}\r\n          name=\"phone\"\r\n          rules={[{ required: true, message: `${t('form.phoneMessage')}!` }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={<h3>{`${t('form.login')}:`}</h3>}\r\n          name=\"login\"\r\n          rules={[{ required: true, message: `${t('form.loginMessage')}!` }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={<h3>{`${t('form.password')}:`}</h3>}\r\n          name=\"password\"\r\n          rules={[{ required: true, message: `${t('form.passwordMessage')}!` }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item className={css.submitButtonFormItem}>\r\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\r\n            {mode === 'create' ? t('createDeveloper') : t('updateDeveloper')}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DevelopersForm;\r\n","import { Form } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport React, { FC } from 'react';\n\nimport { DeveloperInfo } from '../../types';\n\nimport css from './index.module.css';\n\ninterface DeveloperFormDisplayProps {\n  data: DeveloperInfo;\n}\nconst DeveloperFormDisplay: FC<DeveloperFormDisplayProps> = ({ data }: DeveloperFormDisplayProps) => {\n  const { t } = useTranslation('developers');\n  const { t: dt } = useTranslation();\n\n  return (\n    <div className={css.formLayout}>\n      <Form className={css.formDisplay} layout=\"vertical\">\n        <Form.Item label={<h3>{`${t('form.companyName')}:`}</h3>}>\n          <h4>{data.companyName || dt('n/a')}</h4>\n        </Form.Item>\n        <Form.Item label={<h3>{`${t('form.email')}:`}</h3>}>\n          <h4>{data.email || dt('n/a')}</h4>\n        </Form.Item>\n        <Form.Item label={<h3>{`${t('form.phone')}:`}</h3>}>\n          <h4>{data.phone || dt('n/a')}</h4>\n        </Form.Item>\n        <Form.Item label={<h3>{`${t('form.login')}:`}</h3>}>\n          <h4>{data.login || dt('n/a')}</h4>\n        </Form.Item>\n        <Form.Item label={<h3>{`${t('form.password')}:`}</h3>}>\n          <h4>{data.password || 'XXXXXXXXXXXXXXXXX'}</h4>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default DeveloperFormDisplay;\n","import { Button, Form, InputNumber, Table } from 'antd';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport React, { FC } from 'react';\n\nimport { Payment } from '../../types';\nimport { addDeveloperPayment } from '../../redux/slice';\n\nimport { useAppDispatch } from 'store';\n\nimport css from './index.module.css';\n\nconst { Column } = Table;\n\ninterface BalanceProps {\n  data: Payment[];\n}\n\nconst BalanceSuccess: FC<BalanceProps> = ({ data }: BalanceProps) => {\n  const dispatch = useAppDispatch();\n  const params = useParams();\n  const { t } = useTranslation('developers');\n\n  const handleSubmit = (values: Payment) => {\n    params.developerId && dispatch(addDeveloperPayment({ amount: values.amount, id: params.developerId }));\n  };\n\n  return (\n    <>\n      <Form layout=\"inline\" className={css.form} autoComplete=\"off\" onFinish={handleSubmit}>\n        <Form.Item\n          className={css.formInputItem}\n          name=\"amount\"\n          rules={[{ required: true, message: `${t('balance.paymentAmountMessage')}` }]}\n        >\n          <InputNumber className={css.inputNumber} placeholder={t('balance.paymentAmount')} />\n        </Form.Item>\n\n        <Form.Item className={css.formSubmitItem}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            {t('balance.add')}\n          </Button>\n        </Form.Item>\n      </Form>\n      <Table dataSource={data} pagination={false} rowKey={() => `${Math.random()}`}>\n        <Column title={t('balance.paymentAmount')} dataIndex=\"amount\" key=\"amount\" />\n      </Table>\n    </>\n  );\n};\n\nexport default BalanceSuccess;\n","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"layout-wgGQQ\",\"form\":\"form-vLtEE\",\"formInputItem\":\"formInputItem-FX3O3\",\"formSubmitItem\":\"formSubmitItem-Ot3ZF\",\"inputNumber\":\"inputNumber-Q6pbE\"};","import { useParams } from 'react-router-dom';\nimport React, { FC, useEffect } from 'react';\n\nimport { Payment } from '../../types';\nimport { fetchDeveloperBalance } from '../../redux/slice';\nimport { selectDeveloperBalance } from '../../redux/selectors';\nimport BalanceSuccess from './success';\n\nimport { ErrorHolder, Loader } from 'core/components';\nimport { fold } from 'libs/remote';\nimport { useAppDispatch, useAppSelector } from 'store';\n\nimport css from './index.module.css';\n\nconst balanceFolder = fold<Payment[]>(\n  (data) => <BalanceSuccess data={data} />,\n  () => <></>,\n  () => <Loader />,\n  (error) => <ErrorHolder error={error} />\n);\n\nconst Balance: FC = () => {\n  const dispatch = useAppDispatch();\n  const params = useParams();\n\n  const developerBalance = useAppSelector(selectDeveloperBalance);\n\n  useEffect(() => {\n    params.developerId && dispatch(fetchDeveloperBalance(params.developerId));\n  }, [dispatch, params.developerId]);\n\n  return <div className={css.layout}>{balanceFolder(developerBalance)}</div>;\n};\n\nexport default Balance;\n","import { RootState } from 'store';\n\nimport { Developer, DeveloperInfo, Payment } from '../types';\nimport { RemoteData } from 'libs/remote';\n\nconst selectData = (state: RootState): RemoteData<Developer[]> => state.developers.data;\nconst selectDeveloperInfo = (state: RootState): RemoteData<DeveloperInfo> => state.developers.developerInfo;\nconst selectDeveloperBalance = (state: RootState): RemoteData<Payment[]> => state.developers.balance;\n\nexport { selectData, selectDeveloperInfo, selectDeveloperBalance };\n","import { Button, Tabs } from 'antd';\nimport { EditOutlined } from '@ant-design/icons';\nimport { Link, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport React, { FC, useEffect } from 'react';\n\nimport { DeveloperInfo } from 'features/developers/types';\nimport { ErrorHolder, Loader, Subheader } from 'core/components';\nimport { fold } from 'libs/remote';\nimport { useAppDispatch, useAppSelector } from 'store';\n\nimport { Balance, DevelopersFormDisplay } from '../../components';\nimport { readDeveloper } from '../../redux/slice';\nimport { selectDeveloperInfo } from '../../redux/selectors';\n\nimport css from './index.module.css';\n\nconst developerInfoFolder = fold<DeveloperInfo>(\n  (data) => <DevelopersFormDisplay data={data} />,\n  () => <></>,\n  () => <Loader />,\n  (error) => <ErrorHolder error={error} />\n);\n\nconst ReadDeveloper: FC = () => {\n  const { t } = useTranslation('developers');\n  const dispatch = useAppDispatch();\n  const params = useParams();\n\n  const developerInfo = useAppSelector(selectDeveloperInfo);\n\n  useEffect(() => {\n    params.developerId && dispatch(readDeveloper(params.developerId));\n  }, [dispatch, params.developerId]);\n\n  return (\n    <>\n      <Subheader goBack goBackTo=\"/developers\" title={t('readDeveloperTitle')} />\n\n      <div className={css.layout}>\n        <Tabs\n          size=\"large\"\n          className={css.tabs}\n          tabBarExtraContent={\n            <Link to={`/developers/update/${params.developerId}`}>\n              <Button type=\"primary\" htmlType=\"submit\" shape=\"round\">\n                <EditOutlined />\n              </Button>\n            </Link>\n          }\n        >\n          <Tabs.TabPane tab={t('tabs.tab1')} key=\"1\">\n            {developerInfoFolder(developerInfo)}\n          </Tabs.TabPane>\n          <Tabs.TabPane tab={t('tabs.tab2')} key=\"2\">\n            <Balance />\n          </Tabs.TabPane>\n        </Tabs>\n      </div>\n    </>\n  );\n};\n\nexport default ReadDeveloper;\n","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"layout-a22jG\",\"tabs\":\"tabs-Ec6HO\"};"],"names":["mode","data","t","useTranslation","dispatch","useAppDispatch","params","useParams","fields","useMemo","name","value","companyName","email","login","phone","undefined","className","css","onFinish","values","trimmedValues","trimObjectValues","createDeveloper","updateDeveloper","id","developerId","autoComplete","layout","label","rules","required","message","type","htmlType","size","dt","password","Column","addDeveloperPayment","amount","placeholder","dataSource","pagination","rowKey","Math","random","title","dataIndex","key","balanceFolder","fold","error","developerBalance","useAppSelector","selectDeveloperBalance","useEffect","fetchDeveloperBalance","selectData","state","developers","selectDeveloperInfo","developerInfo","balance","developerInfoFolder","readDeveloper","goBack","goBackTo","tabBarExtraContent","to","shape","EditOutlined","tab"],"sourceRoot":""}