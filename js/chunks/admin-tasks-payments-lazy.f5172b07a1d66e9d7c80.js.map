{"version":3,"file":"js\\chunks\\admin-tasks-payments-lazy.f5172b07a1d66e9d7c80.js","mappings":"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","sources":["webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/payments/page/failure.tsx","webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/payments/page/loading.tsx","webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/payments/page/success.tsx","webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/payments/page/index.module.css?ed99","webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/payments/page/index.tsx","webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/payments/index.ts"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { ErrorHolder } from 'core/components';\nimport { ErrorInfo } from 'types';\nimport { fetchPayments } from '../redux/slice';\nimport { selectActiveStatus } from '../redux/selectors';\nimport { useAppDispatch, useAppSelector } from 'store';\n\nexport interface PaymentsFailureProps {\n  error: ErrorInfo;\n}\nconst PaymentsFailure: FC<PaymentsFailureProps> = ({ error }: PaymentsFailureProps) => {\n  const dispatch = useAppDispatch();\n  const aciveStatus = useAppSelector(selectActiveStatus);\n\n  const retryRequest = () => {\n    dispatch(fetchPayments(aciveStatus));\n  };\n\n  return <ErrorHolder error={error} retryRequest={retryRequest} />;\n};\n\nexport default PaymentsFailure;\n","import { Loader } from 'core/components';\nimport React, { FC } from 'react';\n\nconst PaymentsLoading: FC = () => {\n  return <Loader />;\n};\n\nexport default PaymentsLoading;\n","import { Button, Descriptions, Dropdown, Menu, Modal, Table } from 'antd';\nimport { CheckCircleOutlined } from '@ant-design/icons';\nimport React, { FC, useState } from 'react';\n\nimport { useAppDispatch, useAppSelector } from 'store';\n\nimport { Payment, PaymentCredentials, PaymentsStatusEnum, RejectionReasonCodeEnum } from '../types';\nimport { updatePaymentsState } from '../redux/slice';\n\nimport { selectActiveStatus } from '../redux/selectors';\nimport { useTranslation } from 'react-i18next';\nimport css from './index.module.css';\n\nconst { Column } = Table;\n\ninterface PaymentsSuccessProps {\n  data: Payment[];\n}\nconst PaymentsSuccess: FC<PaymentsSuccessProps> = ({ data }: PaymentsSuccessProps) => {\n  const dispatch = useAppDispatch();\n  const [paymentToView, setPaymentsToView] = useState<Payment>();\n\n  const { t: dt } = useTranslation();\n  const { t } = useTranslation('admin-tasks-payments');\n\n  const activeStatus = useAppSelector(selectActiveStatus);\n\n  const handleViewPayments = (payment: Payment) => {\n    setPaymentsToView(payment);\n  };\n\n  const handleCloseModal = () => {\n    setPaymentsToView(undefined);\n  };\n\n  const handleApprovePayments = () => {\n    paymentToView?.id && dispatch(updatePaymentsState({ id: paymentToView.id, state: 'completed' }));\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const handleRejectMenuClick = ({ key }: any) => {\n    paymentToView?.id &&\n      dispatch(updatePaymentsState({ id: paymentToView.id, state: 'rejected', rejectionReasonCode: key }));\n  };\n\n  const menu = (\n    <Menu onClick={handleRejectMenuClick}>\n      <Menu.Item key={RejectionReasonCodeEnum.POOR_QUALITY}>\n        {t(`rejection-reasons.${RejectionReasonCodeEnum.POOR_QUALITY}`)}\n      </Menu.Item>\n      <Menu.Item key={RejectionReasonCodeEnum.INAPPROPRIATE}>\n        {t(`rejection-reasons.${RejectionReasonCodeEnum.INAPPROPRIATE}`)}\n      </Menu.Item>\n      <Menu.Item key={RejectionReasonCodeEnum.COPYRIGHT_VIOLATION}>\n        {t(`rejection-reasons.${RejectionReasonCodeEnum.COPYRIGHT_VIOLATION}`)}\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <section className={css.layout}>\n      <Table<Payment> dataSource={data} rowKey=\"id\" pagination={false}>\n        <Column ellipsis title={t('columns.creator-id')} dataIndex=\"creatorId\" key=\"creatorId\" width={'10%'} />\n        <Column ellipsis title={t('columns.amount')} dataIndex=\"amount\" key=\"amount\" />\n        <Column\n          ellipsis\n          title={t('columns.created-at')}\n          dataIndex=\"createdAt\"\n          key=\"createdAt\"\n          width={'15%'}\n          render={(dateString: string) => new Date(dateString).toLocaleString() || dt('n/a')}\n        />\n        <Column\n          ellipsis\n          title={t('columns.payment-method-type')}\n          dataIndex=\"paymentMethodType\"\n          key=\"paymentMethodType\"\n          width={'12%'}\n          render={(paymentMethodType) => paymentMethodType || dt('n/a')}\n        />\n        <Column ellipsis title={t('columns.state')} dataIndex=\"state\" key=\"state\" width={'10%'} />\n        <Column\n          ellipsis\n          title={t('columns.payment-credentials')}\n          dataIndex=\"paymentMethodCredentials\"\n          key=\"paymentMethodCredentials\"\n          className={css.paymentCredentialsCell}\n          render={(paymentMethodCredentials: PaymentCredentials) => (\n            <>\n              <span>{paymentMethodCredentials.card_number || dt('n/a')}</span>\n              <span>{paymentMethodCredentials.holder_name || dt('n/a')}</span>\n            </>\n          )}\n        />\n\n        <Column\n          width={'80px'}\n          title=\"\"\n          key=\"action\"\n          render={(_, record: Payment) => (\n            <Button className={css.viewButton} type=\"link\" onClick={() => handleViewPayments(record)}>\n              {dt('view')}\n            </Button>\n          )}\n        />\n      </Table>\n      <Modal\n        className={css.modal}\n        title={t('review-modal.title')}\n        visible={!!paymentToView}\n        onCancel={handleCloseModal}\n        footer={null}\n      >\n        <Descriptions\n          column={{ xxl: 2, xl: 2, lg: 2, md: 1, sm: 1, xs: 1 }}\n          size=\"small\"\n          title={t('review-modal.description-title')}\n        >\n          <Descriptions.Item label={t('columns.payment-id')}>{paymentToView?.id || dt('n/a')}</Descriptions.Item>\n          <Descriptions.Item label={t('columns.creator-id')}>{paymentToView?.creatorId || dt('n/a')}</Descriptions.Item>\n          <Descriptions.Item label={t('columns.amount')}>{paymentToView?.amount || dt('n/a')}</Descriptions.Item>\n          <Descriptions.Item label={t('columns.state')}>{paymentToView?.state || dt('n/a')}</Descriptions.Item>\n\n          <Descriptions.Item label={t('columns.payment-method-type')}>\n            {paymentToView?.paymentMethodType || dt('n/a')}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('columns.created-at')}>\n            {new Date(paymentToView?.createdAt || '').toLocaleString() || dt('n/a')}\n          </Descriptions.Item>\n\n          <Descriptions.Item label={t('columns.payment-credentials')}>\n            {paymentToView?.paymentMethodCredentials.holder_name || dt('n/a')}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('columns.payment-credentials')}>\n            {paymentToView?.paymentMethodCredentials.card_number || dt('n/a')}\n          </Descriptions.Item>\n        </Descriptions>\n        <div className={css.modalControls}>\n          {activeStatus !== PaymentsStatusEnum.completed && (\n            <Button icon={<CheckCircleOutlined />} onClick={handleApprovePayments}>\n              {dt('approve')}\n            </Button>\n          )}\n          {activeStatus !== PaymentsStatusEnum.rejected && (\n            <Dropdown.Button overlay={menu}>{dt('reject')}</Dropdown.Button>\n          )}\n        </div>\n      </Modal>\n    </section>\n  );\n};\n\nexport default PaymentsSuccess;\n","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"layout-tNcSQ\",\"viewButton\":\"viewButton-cXPUF\",\"modal\":\"modal-O8IK6\",\"image\":\"image-cqn4F\",\"modalControls\":\"modalControls-u6ag4\",\"paymentCredentialsCell\":\"paymentCredentialsCell-wOcjZ\"};","import { Radio, RadioChangeEvent } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\nimport React, { FC, useEffect } from 'react';\r\n\r\nimport { Subheader } from 'core/components';\r\nimport { fold, initialized } from 'libs/remote';\r\nimport { useAppDispatch, useAppSelector } from 'store';\r\n\r\nimport { Payment, PaymentsStatusEnum } from '../types';\r\nimport { fetchPayments, setActiveStatus, setPayments } from '../redux/slice';\r\nimport { selectActiveStatus, selectData } from '../redux/selectors';\r\n\r\nimport PaymentsFailure from './failure';\r\nimport PaymentsLoading from './loading';\r\nimport PaymentsSuccess from './success';\r\n\r\nconst paymentsFolder = fold<Payment[]>(\r\n  (data) => <PaymentsSuccess data={data} />,\r\n  () => <></>,\r\n  () => <PaymentsLoading />,\r\n  (error) => <PaymentsFailure error={error} />\r\n);\r\n\r\nconst PaymentsIndex: FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const data = useAppSelector(selectData);\r\n  const activeStatus = useAppSelector(selectActiveStatus);\r\n  const { t } = useTranslation('admin-tasks-payments');\r\n  const { t: dt } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPayments(activeStatus));\r\n\r\n    return () => {\r\n      dispatch(setPayments(initialized()));\r\n    };\r\n  }, [activeStatus, dispatch]);\r\n\r\n  const handleChangeStatus = (e: RadioChangeEvent) => {\r\n    dispatch(setActiveStatus(e.target.value as PaymentsStatusEnum));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Subheader\r\n        goBack\r\n        title={t('title')}\r\n        actions={[\r\n          <Radio.Group key=\"radio\" value={activeStatus} onChange={handleChangeStatus}>\r\n            <Radio.Button value={PaymentsStatusEnum.pending}>{dt('pending')}</Radio.Button>\r\n            <Radio.Button value={PaymentsStatusEnum.rejected}>{dt('rejected')}</Radio.Button>\r\n            <Radio.Button value={PaymentsStatusEnum.completed}>{dt('approved')}</Radio.Button>\r\n          </Radio.Group>,\r\n        ]}\r\n      />\r\n\r\n      <>{paymentsFolder(data)}</>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaymentsIndex;\r\n","import Media from './page';\n\nexport default Media;\n"],"names":["error","dispatch","useAppDispatch","aciveStatus","useAppSelector","selectActiveStatus","retryRequest","fetchPayments","Column","data","paymentToView","setPaymentsToView","useState","t","dt","useTranslation","activeStatus","menu","onClick","key","id","updatePaymentsState","state","rejectionReasonCode","RejectionReasonCodeEnum","className","dataSource","rowKey","pagination","ellipsis","title","dataIndex","width","render","dateString","Date","toLocaleString","paymentMethodType","paymentMethodCredentials","card_number","holder_name","_","record","type","visible","onCancel","undefined","footer","column","xxl","xl","lg","md","sm","xs","size","label","creatorId","amount","createdAt","PaymentsStatusEnum","icon","CheckCircleOutlined","overlay","paymentsFolder","fold","selectData","useEffect","setPayments","initialized","goBack","actions","value","onChange","e","setActiveStatus","target"],"sourceRoot":""}