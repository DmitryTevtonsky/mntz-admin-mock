{"version":3,"file":"js\\chunks\\admin-tasks-publications-lazy.c7ffc9833db49ad2364d.js","mappings":"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","sources":["webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/publications/page/failure.tsx","webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/publications/page/loading.tsx","webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/publications/page/success.tsx","webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/publications/page/index.module.css?16ac","webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/publications/page/index.tsx","webpack://monetize-frontend-admin-panel/./src/features/admin-tasks/publications/index.ts"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { ErrorHolder } from 'core/components';\nimport { ErrorInfo } from 'types';\nimport { fetchPublications } from '../redux/slice';\nimport { selectActiveStatus } from '../redux/selectors';\nimport { useAppDispatch, useAppSelector } from 'store';\n\nexport interface MediaFailureProps {\n  error: ErrorInfo;\n}\nconst MediaFailure: FC<MediaFailureProps> = ({ error }: MediaFailureProps) => {\n  const dispatch = useAppDispatch();\n  const activeStatus = useAppSelector(selectActiveStatus);\n\n  const retryRequest = () => {\n    dispatch(fetchPublications(activeStatus));\n  };\n\n  return <ErrorHolder error={error} retryRequest={retryRequest} />;\n};\n\nexport default MediaFailure;\n","import { Loader } from 'core/components';\nimport React, { FC } from 'react';\n\nconst MediaLoading: FC = () => {\n  return <Loader />;\n};\n\nexport default MediaLoading;\n","import { Button, Descriptions, Dropdown, Menu, Modal, Table } from 'antd';\nimport { CheckCircleOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport React, { FC, useState } from 'react';\n\nimport { useAppDispatch, useAppSelector } from 'store';\n\nimport { Post, PostStatusEnum, RejectionReasonCodeEnum } from '../types';\nimport { selectActiveStatus } from '../redux/selectors';\nimport { updatePostState } from '../redux/slice';\n\nimport css from './index.module.css';\n\nconst { Column } = Table;\n\ninterface MediaSuccessProps {\n  data: Post[];\n}\nconst MediaSuccess: FC<MediaSuccessProps> = ({ data }: MediaSuccessProps) => {\n  const dispatch = useAppDispatch();\n  const [postToView, setPostToView] = useState<Post>();\n\n  const { t: dt } = useTranslation();\n  const { t } = useTranslation('admin-tasks-publications');\n\n  const activeStatus = useAppSelector(selectActiveStatus);\n\n  const handleViewPost = (post: Post) => {\n    setPostToView(post);\n  };\n\n  const handleCloseModal = () => {\n    setPostToView(undefined);\n  };\n\n  const handleApprovePost = () => {\n    postToView?.id && dispatch(updatePostState({ id: postToView.id, state: 'active' }));\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const handleRejectMenuClick = ({ key }: any) => {\n    postToView?.id && dispatch(updatePostState({ id: postToView.id, state: 'bad_post', rejectionReasonCode: key }));\n  };\n\n  const menu = (\n    <Menu onClick={handleRejectMenuClick}>\n      <Menu.Item key={RejectionReasonCodeEnum.WRONG_MEDIA}>\n        {t(`rejection-reasons.${RejectionReasonCodeEnum.WRONG_MEDIA}`)}\n      </Menu.Item>\n      <Menu.Item key={RejectionReasonCodeEnum.WRONG_TRACKING_LINK}>\n        {t(`rejection-reasons.${RejectionReasonCodeEnum.WRONG_TRACKING_LINK}`)}\n      </Menu.Item>\n      <Menu.Item key={RejectionReasonCodeEnum.CONTUCT_US}>\n        {t(`rejection-reasons.${RejectionReasonCodeEnum.CONTUCT_US}`)}\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <section className={css.layout}>\n      <Table<Post> dataSource={data} rowKey=\"id\" pagination={false}>\n        <Column ellipsis title={t('columns.post-id')} dataIndex=\"id\" key=\"id\" />\n        <Column\n          ellipsis\n          title={t('columns.creator-id')}\n          dataIndex=\"creatorId\"\n          key=\"creatorId\"\n          render={(creatorId) => creatorId || dt('n/a')}\n        />\n        <Column\n          ellipsis\n          title={t('columns.offer-id')}\n          dataIndex=\"offerId\"\n          key=\"offerId\"\n          render={(offerId) => <Link to={`/offers/${offerId}`}>{offerId}</Link> || dt('n/a')}\n        />\n        <Column\n          ellipsis\n          title={t('columns.media-id')}\n          dataIndex=\"mediaAssetId\"\n          key=\"mediaAssetId\"\n          render={(mediaAssetId) => mediaAssetId || dt('n/a')}\n        />\n        <Column ellipsis title={t('columns.placements')} dataIndex=\"socialNetwork\" key=\"socialNetwork\" />\n\n        <Column\n          ellipsis\n          title={t('columns.link')}\n          dataIndex=\"postLink\"\n          key=\"postLink\"\n          render={(postLink) =>\n            postLink ? (\n              <a href={postLink} target=\"_blank\" rel=\"noreferrer\">\n                {postLink}\n              </a>\n            ) : (\n              dt('n/a')\n            )\n          }\n        />\n\n        <Column\n          width={'80px'}\n          title=\"\"\n          key=\"action\"\n          render={(record: Post) => (\n            <Button className={css.viewButton} type=\"link\" onClick={() => handleViewPost(record)}>\n              {dt('view')}\n            </Button>\n          )}\n        />\n      </Table>\n      <Modal\n        className={css.modal}\n        title={t('review-modal.title')}\n        visible={!!postToView}\n        onCancel={handleCloseModal}\n        footer={null}\n      >\n        <Descriptions\n          column={{ xxl: 2, xl: 2, lg: 2, md: 1, sm: 1, xs: 1 }}\n          size=\"small\"\n          title={t('review-modal.description-title')}\n        >\n          <Descriptions.Item label={t('columns.post-id')}>{postToView?.id || dt('n/a')}</Descriptions.Item>\n          <Descriptions.Item label={t('columns.creator-id')}>{postToView?.ownerId || dt('n/a')}</Descriptions.Item>\n          <Descriptions.Item label={t('columns.offer-id')}>{postToView?.offerId || dt('n/a')}</Descriptions.Item>\n          <Descriptions.Item label={t('columns.media-id')}>{postToView?.adAssetId || dt('n/a')}</Descriptions.Item>\n          <Descriptions.Item label={t('columns.placements')}>\n            {postToView?.socialNetwork || dt('n/a')}\n          </Descriptions.Item>\n          <Descriptions.Item label={t('columns.link')}>\n            {postToView?.postLink ? (\n              <a href={postToView.postLink} target=\"_blank\" rel=\"noreferrer\">\n                {postToView.postLink}\n              </a>\n            ) : (\n              dt('n/a')\n            )}\n          </Descriptions.Item>\n        </Descriptions>\n        <div className={css.modalControls}>\n          {activeStatus !== PostStatusEnum.active && (\n            <Button icon={<CheckCircleOutlined />} onClick={handleApprovePost}>\n              {dt('approve')}\n            </Button>\n          )}\n          {activeStatus !== PostStatusEnum.bad_post && <Dropdown.Button overlay={menu}>{dt('reject')}</Dropdown.Button>}\n        </div>\n      </Modal>\n    </section>\n  );\n};\n\nexport default MediaSuccess;\n","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"layout-KE5iR\",\"viewButton\":\"viewButton-pGhvk\",\"modal\":\"modal-g7ViJ\",\"image\":\"image-MM9l7\",\"modalControls\":\"modalControls-rpXR_\"};","import { Radio, RadioChangeEvent } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\nimport React, { FC, useEffect } from 'react';\r\n\r\nimport { Subheader } from 'core/components';\r\nimport { fold, initialized } from 'libs/remote';\r\nimport { useAppDispatch, useAppSelector } from 'store';\r\n\r\nimport { Post, PostStatusEnum } from '../types';\r\nimport { fetchPublications, setActiveStatus, setPublications } from '../redux/slice';\r\nimport { selectActiveStatus, selectData } from '../redux/selectors';\r\n\r\nimport PublicationsFailure from './failure';\r\nimport PublicationsLoading from './loading';\r\nimport PublicationsSuccess from './success';\r\n\r\nconst publicationsFolder = fold<Post[]>(\r\n  (data) => <PublicationsSuccess data={data} />,\r\n  () => <></>,\r\n  () => <PublicationsLoading />,\r\n  (error) => <PublicationsFailure error={error} />\r\n);\r\n\r\nconst PublicationsIndex: FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const data = useAppSelector(selectData);\r\n  const activeStatus = useAppSelector(selectActiveStatus);\r\n  const { t } = useTranslation('admin-tasks-publications');\r\n  const { t: dt } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPublications(activeStatus));\r\n\r\n    return () => {\r\n      dispatch(setPublications(initialized()));\r\n    };\r\n  }, [activeStatus, dispatch]);\r\n\r\n  const handleChangeStatus = (e: RadioChangeEvent) => {\r\n    dispatch(setActiveStatus(e.target.value as PostStatusEnum));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Subheader\r\n        goBack\r\n        title={t('title')}\r\n        actions={[\r\n          <Radio.Group key=\"radio\" value={activeStatus} onChange={handleChangeStatus}>\r\n            <Radio.Button value={PostStatusEnum.post_review}>{dt('pending')}</Radio.Button>\r\n            <Radio.Button value={PostStatusEnum.bad_post}>{dt('rejected')}</Radio.Button>\r\n            <Radio.Button value={PostStatusEnum.active}>{dt('approved')}</Radio.Button>\r\n          </Radio.Group>,\r\n        ]}\r\n      />\r\n\r\n      {publicationsFolder(data)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicationsIndex;\r\n","import Media from './page';\n\nexport default Media;\n"],"names":["error","dispatch","useAppDispatch","activeStatus","useAppSelector","selectActiveStatus","retryRequest","fetchPublications","Column","data","postToView","setPostToView","useState","t","dt","useTranslation","menu","onClick","key","id","updatePostState","state","rejectionReasonCode","RejectionReasonCodeEnum","className","dataSource","rowKey","pagination","ellipsis","title","dataIndex","render","creatorId","offerId","to","mediaAssetId","postLink","href","target","rel","width","record","type","visible","onCancel","undefined","footer","column","xxl","xl","lg","md","sm","xs","size","label","ownerId","adAssetId","socialNetwork","PostStatusEnum","icon","CheckCircleOutlined","overlay","publicationsFolder","fold","selectData","useEffect","setPublications","initialized","goBack","actions","value","onChange","e","setActiveStatus"],"sourceRoot":""}